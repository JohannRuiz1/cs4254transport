#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64encode

MSG_SIZE = 1500
# Currently at threshold with no added headers
DATA_SIZE = 1060
TIMEOUT = 5
SEQUENCE = 0
# Assumes the advertised window is 1 (for part 3) (unit is bytes)
ADVWINDOW = 3


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(0.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254send: " + string + "\n")

def send_next_packet():
  global SEQUENCE
  global msg

  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": False, "cwnd": ADVWINDOW})
    # Calculate the number of bytes in the serialized JSON string
    msg_bytes = len(msg.encode())
    log("Size of 'msg' in bytes: " + str(msg_bytes))

    #sock.sendto(msg.encode(), dest) # ==> Sending one packet

    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    SEQUENCE+=len(data)
    return True
  else:
    return False

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  try: 
    result = sock.recvfrom(MSG_SIZE)
    if result:
      (data, addr) = result
      try:
        decoded = json.loads(data.decode())
        log("[recv pkt] " + str(decoded))
        log("[recv ack] " + str(decoded['ack']))

        # If there is an ack, send next packet
        if decoded['ack'] == SEQUENCE:
          # Try to send next packet; break if no more data
          if (not send_next_packet()):
            log("Sending EOF Packet")
            msg = json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False, "cwnd": ADVWINDOW})
            sock.sendto(msg.encode(), dest)
            break;
            
      except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet] Error: {}".format(e))
  except socket.timeout:
    # We need to resend the packet if a timeout is hit (using the sequence number)
    log("[error] timeout, resending last packet")
    # Isn't msg still the content from the last packet?
    # log("[resend data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    sock.sendto(msg.encode(), dest)
    #sys.exit(-1) #This will be removed

log("[completed] closing connection")
sys.exit(0)
