#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64decode

def log(string):
  #logging takes away from time
  #placeholder=1
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the sockets
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

EXPECTED_PACKET_NUM = 0
packet_buffer = {}


def print_data(data):
  sys.stdout.buffer.write(data)
  sys.stderr.write("\n")

def process_packet(decoded, addr):
  global EXPECTED_PACKET_NUM
  
  PACKET_NUM = decoded['sequence']
  data = b64decode(decoded['data'].encode())
  # Optimal Conditon: Recieve of PACKET_NUM=0 =? EXPECTED_PACKET_NUM

  log("[recv data] " + str(decoded['sequence']) + " (" + str(PACKET_NUM+1) + ") ACCEPTED")
  if (PACKET_NUM != EXPECTED_PACKET_NUM):
    if (PACKET_NUM < EXPECTED_PACKET_NUM):
      log("[duplicates] data already receieved")
    else:
      log("[out-of-order] recieved packet out of order")
      packet_buffer[PACKET_NUM] = decoded
  else:
    print_data(data)
    EXPECTED_PACKET_NUM+=1

    while (EXPECTED_PACKET_NUM in packet_buffer):
      # Process the buffered packet
      log("[process-of-order] processing out of order packets")
      buffered_packet = packet_buffer[EXPECTED_PACKET_NUM]
      print_data(b64decode(buffered_packet['data'].encode()))
      #msg = json.dumps({"ack": EXPECTED_PACKET_NUM})
      #sock.sendto(msg.encode(), addr)
      del packet_buffer[EXPECTED_PACKET_NUM]
      EXPECTED_PACKET_NUM+=1

  # Send back an ack to the sender
  msg = json.dumps({"ack": EXPECTED_PACKET_NUM})
  log("ABOUT TO SEND " + msg)
  val = sock.sendto(msg.encode(), addr)
  if val < len(msg):
    log("[error] unable to fully send packet")
  


# Now listen for packets
while True:
  try:
    log("ABOUT TO SLEEP")
    result = sock.recvfrom(MSG_SIZE)
    # If nothing is ready, we hit the timeout
    (data, addr) = result # note, data is bytes, so we must convert back to string before use
    try:
      decoded = json.loads(data.decode())  
      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed] Size of buffer " +str(len(packet_buffer)))
        log("[debug] ")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        ## CONGESTION CONTROL

        ##
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        process_packet(decoded, addr)

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet] Error: {}".format(e))
  except socket.timeout:
    log("[completed] Size of buffer " +str(len(packet_buffer)))
    log("[error] timeout or fin happened")
    break;

sys.exit(0)
